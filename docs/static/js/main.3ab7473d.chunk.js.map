{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","React","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","GifGridItem","title","url","src","alt","getGifs","Category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setSate","useEffect","then","useFetchGifs","key","GifExpertApp","categoria","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAEPC,IAAMC,SAAS,IAFR,mBAEpCC,EAFoC,KAExBC,EAFwB,KAe3C,OACG,0BAAMC,SATY,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BT,GAAa,SAAAU,GAAI,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAMd,2BACMO,UAAU,mBACVC,KAAK,OACLC,MAAOV,EACPW,SAjBY,SAAAR,GACtBF,EAAcE,EAAES,OAAOF,YCNlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,yBAAKP,UAAU,0DACZ,yBAAKQ,IAAKD,EAAKE,IAAKH,IAClB,2BAAIA,K,uBCNJI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTL,EADS,iDACuCM,UAAUF,GADjD,+DAEIG,MAAMP,GAFV,cAETQ,EAFS,gBAGQA,EAAKC,OAHb,uBAGPC,EAHO,EAGPA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAR3B,kBAWRW,GAXQ,4CAAH,sDCGPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACbpB,mBAAS,CAC9B0B,KAAK,GACLQ,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OAPAC,qBAAU,WACNlB,EAAQC,GACPkB,MAAK,SAAAT,GAAG,OAAIO,EAAQ,CACjBV,KAAKG,EACLK,SAAQ,SAEd,CAACd,IACIe,EDVwBI,CAAanB,GAAhCW,EADyB,EAC9BL,KAAaQ,EADiB,EACjBA,QACpB,OACI,oCACI,4BAAKd,GACJc,GAAW,yCACZ,yBAAKzB,UAAU,8DAEPsB,EAAOH,KAAI,SAAAC,GAAG,OAAK,kBAAC,EAAD,eACfW,IAAKX,EAAIC,IACLD,UETfY,EAAe,WAAO,IAAD,EACI1C,IAAMC,SAAS,CAAC,cADpB,mBACvB0C,EADuB,KACZ5C,EADY,KAE9B,OACI,yBAAKW,UAAU,aACX,4CACA,kBAAC,EAAD,CAAaX,aAAgBA,IAC7B,6BACA,4BAEQ4C,EAAUd,KAAI,SAAAR,GAAQ,OAAK,kBAAC,EAAD,CAASoB,IAAKpB,EACLA,SAAUA,U,YCTlEuB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.3ab7473d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategoria}) => {\r\n\r\n    const [inputValue, setInputValue] = React.useState('');\r\n\r\n    const handleInputChange = e =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategoria(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n       <form onSubmit={handleSubmit}>\r\n            <input \r\n                  className=\"input is-primary\" \r\n                  type=\"text\" \r\n                  value={inputValue}\r\n                  onChange={handleInputChange}\r\n            />\r\n       </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"cardd animate__animated animate__bounce animate__delay\">\r\n           <img src={url} alt={title} />\r\n             <p>{title}</p>    \r\n        </div>\r\n    )\r\n}","export const getGifs = async (Category) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(Category)}&limit=10&api_key=5GSb8HedavvGgMXxM28qI9LR4yJ25gn0`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n}\r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nexport const GifGrid = ({ Category }) => {\r\n    const {data:images ,loading} = useFetchGifs(Category)\r\n    return (\r\n        <>\r\n            <h1>{Category}</h1>\r\n            {loading && <p>loading...</p>}\r\n            <div className=\"card-grid animate__animated animate__bounce animate__delay\">\r\n                {\r\n                    images.map(img => (<GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGif\";\r\nexport const useFetchGifs = (Category) => {\r\n    const [state, setSate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    useEffect(() =>{\r\n        getGifs(Category)\r\n        .then(img => setSate({\r\n            data:img,\r\n            loading:false\r\n        }));\r\n    },[Category]);\r\n    return state;\r\n}","import React from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categoria, setCategoria] = React.useState(['One Punch']);\r\n    return (\r\n        <div className=\"container\">  \r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategoria = {setCategoria}/>\r\n            <hr/>\r\n            <ul>\r\n                {\r\n                    categoria.map(Category => (<GifGrid key={Category}\r\n                                                        Category={Category}/>))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport 'bulma/css/bulma.css';\nimport './index.css';\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}